import { GraphQLResolveInfo } from "graphql";
import { AggregateLinkArgs } from "./args/AggregateLinkArgs";
import { CreateLinkArgs } from "./args/CreateLinkArgs";
import { CreateManyLinkArgs } from "./args/CreateManyLinkArgs";
import { DeleteLinkArgs } from "./args/DeleteLinkArgs";
import { DeleteManyLinkArgs } from "./args/DeleteManyLinkArgs";
import { FindFirstLinkArgs } from "./args/FindFirstLinkArgs";
import { FindManyLinkArgs } from "./args/FindManyLinkArgs";
import { FindUniqueLinkArgs } from "./args/FindUniqueLinkArgs";
import { GroupByLinkArgs } from "./args/GroupByLinkArgs";
import { UpdateLinkArgs } from "./args/UpdateLinkArgs";
import { UpdateManyLinkArgs } from "./args/UpdateManyLinkArgs";
import { UpsertLinkArgs } from "./args/UpsertLinkArgs";
import { Link } from "../../../models/Link";
import { AffectedRowsOutput } from "../../outputs/AffectedRowsOutput";
import { AggregateLink } from "../../outputs/AggregateLink";
import { LinkGroupBy } from "../../outputs/LinkGroupBy";
export declare class LinkCrudResolver {
    link(ctx: any, info: GraphQLResolveInfo, args: FindUniqueLinkArgs): Promise<Link | null>;
    findFirstLink(ctx: any, info: GraphQLResolveInfo, args: FindFirstLinkArgs): Promise<Link | null>;
    links(ctx: any, info: GraphQLResolveInfo, args: FindManyLinkArgs): Promise<Link[]>;
    createLink(ctx: any, info: GraphQLResolveInfo, args: CreateLinkArgs): Promise<Link>;
    createManyLink(ctx: any, info: GraphQLResolveInfo, args: CreateManyLinkArgs): Promise<AffectedRowsOutput>;
    deleteLink(ctx: any, info: GraphQLResolveInfo, args: DeleteLinkArgs): Promise<Link | null>;
    updateLink(ctx: any, info: GraphQLResolveInfo, args: UpdateLinkArgs): Promise<Link | null>;
    deleteManyLink(ctx: any, info: GraphQLResolveInfo, args: DeleteManyLinkArgs): Promise<AffectedRowsOutput>;
    updateManyLink(ctx: any, info: GraphQLResolveInfo, args: UpdateManyLinkArgs): Promise<AffectedRowsOutput>;
    upsertLink(ctx: any, info: GraphQLResolveInfo, args: UpsertLinkArgs): Promise<Link>;
    aggregateLink(ctx: any, info: GraphQLResolveInfo, args: AggregateLinkArgs): Promise<AggregateLink>;
    groupByLink(ctx: any, info: GraphQLResolveInfo, args: GroupByLinkArgs): Promise<LinkGroupBy[]>;
}
