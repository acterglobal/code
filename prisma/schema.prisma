// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

generator typegraphql {
  provider = "typegraphql-prisma"
}

model Account {
  id                 String    @id @default(uuid())
  compoundId         String    @unique @map(name: "compound_id")
  userId             String    @map(name: "user_id")
  providerType       String    @map(name: "provider_type")
  providerId         String    @map(name: "provider_id")
  providerAccountId  String    @map(name: "provider_account_id")
  refreshToken       String?   @map(name: "refresh_token")
  accessToken        String?   @map(name: "access_token")
  accessTokenExpires DateTime? @map(name: "access_token_expires")
  createdAt          DateTime  @default(now()) @map(name: "created_at")
  updatedAt          DateTime  @default(now()) @map(name: "updated_at")

  @@index([providerAccountId], name: "providerAccountId")
  @@index([providerId], name: "providerId")
  @@index([userId], name: "userId")
  @@map(name: "accounts")
}

model Acter {
  id          String  @id @default(uuid())
  acterTypeId String  @map(name: "acter_type_id")
  name        String?
  slug        String? @unique
  location    String?
  locationLat Float?  @map(name: "location_lat")
  locationLng Float?  @map(name: "location_lng")

  type    ActerType         @relation(fields: [acterTypeId], references: [id])
  parent  ActerConnection?  @relation("parent")
  members ActerConnection[] @relation("members")

  User User?
  @@map(name: "acters")
}

model ActerConnection {
  id            String @id @default(uuid())
  parentActerId String @map(name: "parent_acter_id")
  memberActerId String @map(name: "connection_acter_id")

  parent Acter @relation(name: "parent", fields: [parentActerId], references: [id])
  member Acter @relation(name: "members", fields: [memberActerId], references: [id])

  @@map(name: "acter_connections")
}

model ActerType {
  id   String @id @default(uuid())
  name String @unique

  Acter Acter[]
  @@map(name: "acter_types")
}

model Session {
  id           String   @id @default(uuid())
  userId       String   @map(name: "user_id")
  expires      DateTime
  sessionToken String   @unique @map(name: "session_token")
  accessToken  String   @unique @map(name: "access_token")
  createdAt    DateTime @default(now()) @map(name: "created_at")
  updatedAt    DateTime @default(now()) @map(name: "updated_at")

  @@map(name: "sessions")
}

model User {
  id            String    @id @default(uuid())
  acterId       String?   @map(name: "acter_id")
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map(name: "email_verified")
  image         String?
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @default(now()) @map(name: "updated_at")

  acter Acter? @relation(fields: [acterId], references: [id])

  @@map(name: "users")
}

model VerificationRequest {
  id         String   @id @default(uuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now()) @map(name: "created_at")
  updatedAt  DateTime @default(now()) @map(name: "updated_at")

  @@map(name: "verification_requests")
}
