// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

generator typegraphql {
  provider           = "typegraphql-prisma"
  output             = "../@schema"
  emitTranspiledCode = true
}

model Account {
  id                 String    @id @default(uuid())
  compoundId         String    @unique @map("compound_id")
  userId             String    @map("user_id")
  providerType       String    @map("provider_type")
  providerId         String    @map("provider_id")
  providerAccountId  String    @map("provider_account_id")
  refreshToken       String?   @map("refresh_token")
  accessToken        String?   @map("access_token")
  accessTokenExpires DateTime? @map("access_token_expires")
  createdAt          DateTime  @default(now()) @map("created_at")
  updatedAt          DateTime  @default(now()) @map("updated_at")

  @@index([providerAccountId], name: "providerAccountId")
  @@index([providerId], name: "providerId")
  @@index([userId], name: "userId")
  @@map("accounts")
}

model Acter {
  id          String   @id @default(uuid())
  acterTypeId String   @map("acter_type_id")
  name        String?
  slug        String?
  description String?
  location    String?
  locationLat Float?   @map("location_lat")
  locationLng Float?   @map("location_lng")
  url         String?
  avatarUrl   String?  @map("avatar_url")
  bannerUrl   String?  @map("banner_url")
  useAdmins   Boolean  @default(false) @map("use_admins")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  createdByUser   User   @relation("acter_created_by_user", fields: [createdByUserId], references: [id])
  createdByUserId String @map("created_by_user_id")

  deletedAt      DateTime? @map("deleted_at")
  deltedByUserId String?   @map("deleted_by_user_id")
  DeletedByUser  User?     @relation("acter_deleted_by_user", fields: [deltedByUserId], references: [id])

  ActerType ActerType @relation(fields: [acterTypeId], references: [id])

  Parent        Acter?  @relation("acter_parent", fields: [parentActerId], references: [id])
  Children      Acter[] @relation("acter_parent")
  parentActerId String? @map("parent_acter_id")

  Following ActerConnection[] @relation("follower")
  Followers ActerConnection[] @relation("following")

  User User?

  ActerInterests ActerInterest[]

  Activity            Activity?  @relation("acter")
  ActivitiesOrganized Activity[] @relation("organiser")

  AttachedMessages Message[] @relation("messages")
  AuthoredMessages Message[] @relation("authored")

  @@unique(name: "slug_unique_for_acter_type", fields: [slug, acterTypeId])
  @@map("acters")
}

model ActerConnection {
  id         String   @id @default(uuid())
  isApproved Boolean? @default(true) @map("is_approved")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  CreatedByUser   User   @relation("acter_connection_created_by_user", fields: [createdByUserId], references: [id])
  createdByUserId String @map("created_by_user_id")

  Follower         Acter  @relation("follower", fields: [followerActerId], references: [id])
  followerActerId  String @map("follower_acter_id")
  Following        Acter  @relation("following", fields: [followingActerId], references: [id])
  followingActerId String @map("following_acter_id")

  @@unique(name: "acter_follower_following", fields: [followerActerId, followingActerId])
  @@map("acter_connections")
}

model ActerInterest {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  CreatedByUser   User   @relation("acter_interest_created_by_user", fields: [createdByUserId], references: [id])
  createdByUserId String @map("created_by_user_id")

  Acter      Acter    @relation(fields: [acterId], references: [id])
  acterId    String
  Interest   Interest @relation(fields: [interestId], references: [id])
  interestId String

  @@unique(name: "acter_interests_unique", fields: [acterId, interestId])
  @@map("acter_interests")
}

model ActerType {
  id   String @id @default(uuid())
  name String @unique

  Acter Acter[]

  ActerTypeRules   ActerTypeRule[] @relation("subject")
  RulesOnActerType ActerTypeRule[] @relation("object")
  @@map("acter_types")
}

model ActerTypeRule {
  id        String  @id @default(uuid())
  canCreate Boolean @default(false) @map("can_create")
  canJoin   Boolean @default(false) @map("can_join")
  canBecome Boolean @default(false) @map("can_become")

  Subject            ActerType @relation("subject", fields: [subjectActerTypeId], references: [id])
  subjectActerTypeId String    @map("subject_acter_type_id")
  Object             ActerType @relation("object", fields: [objectActerTypeId], references: [id])
  objectActerTypeId  String    @map("object_acter_type_id")

  @@unique(name: "subject_object_acter_type_ids", fields: [subjectActerTypeId, objectActerTypeId])
  @@map("acter_type_rules")
}

model Activity {
  id       String   @id @default(uuid())
  startAt  DateTime @map("start_at")
  endAt    DateTime @map("end_at")
  isOnline Boolean  @map("is_online")
  isAllDay Boolean  @default(false) @map("is_all_day")

  ActivityType   ActivityType @relation(fields: [activityTypeId], references: [id])
  activityTypeId String

  createdByUser   User     @relation("activity_created_by_user", fields: [createdByUserId], references: [id])
  createdByUserId String   @map("created_by_user_id")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  Acter   Acter?  @relation(name: "acter", fields: [acterId], references: [id])
  acterId String? @unique @map("acter_id")

  Organiser   Acter?  @relation(name: "organiser", fields: [organiserId], references: [id])
  organiserId String? @map("organiser_id")

  @@map("activities")
}

model ActivityType {
  id   String @id @default(uuid())
  name String @unique

  Activity Activity[]
  @@map("activity_types")
}

model Message {
  id        String   @id @default(uuid())
  subject   String
  content   String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  Parent   Message?  @relation("MessageToMessage", fields: [parentId], references: [id])
  parentId String?   @map("parent_id")
  Comments Message[] @relation("MessageToMessage")

  Acter   Acter  @relation("messages", fields: [acterId], references: [id])
  acterId String @map("acter_id")

  Author   Acter  @relation("authored", fields: [authorId], references: [id])
  authorId String @map("author_id")
}

model Interest {
  id          String  @id @default(uuid())
  name        String
  description String?
  sdgNumber   String? @map("sdg_number")

  InterestType   InterestType @relation(fields: [interestTypeId], references: [id])
  interestTypeId String       @map("interest_type_id")

  InterestActers ActerInterest[]

  @@unique(name: "nameUniqueForInterestType", fields: [interestTypeId, name])
  @@map("interests")
}

model InterestType {
  id                   String         @id @default(uuid())
  name                 String
  parent               InterestType?  @relation("parent_interest_type", fields: [parentInterestTypeId], references: [id])
  children             InterestType[] @relation("parent_interest_type")
  sortOrder            Int            @default(0) @map("sort_order")
  parentInterestTypeId String?        @map("parent_interest_type_id")
  Interests            Interest[]


  @@unique(name: "nameUniqueForParentInterestType", fields: [parentInterestTypeId, name])
  @@index([sortOrder])
  @@map("interest_types")
}

model Session {
  id           String   @id @default(uuid())
  userId       String   @map("user_id")
  expires      DateTime
  sessionToken String   @unique @map("session_token")
  accessToken  String   @unique @map("access_token")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @default(now()) @map("updated_at")

  @@map("sessions")
}

model User {
  id            String    @id @default(uuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @default(now()) @map("updated_at")

  Acter   Acter?  @relation(fields: [acterId], references: [id])
  acterId String?

  ActersCreated    Acter[]           @relation("acter_created_by_user")
  ActerConnections ActerConnection[] @relation("acter_connection_created_by_user")

  ActerInterest ActerInterest[] @relation("acter_interest_created_by_user")

  ActivitiesCreated Activity[] @relation("activity_created_by_user")

  ActersDeleted Acter[] @relation("acter_deleted_by_user")

  @@map("users")
}

model VerificationRequest {
  id         String   @id @default(uuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @default(now()) @map("updated_at")

  @@map("verification_requests")
}
